# -*- coding: utf-8 -*-
"""unity_message.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KcWDmrizGcM0H8Gjc7gKEj9jOaoeMeZI


## Question Answer Model - Legacy using Doc2Vec ##

Author - Dhruv Shah
"""

import os
import numpy as np
import spacy
import gensim
import collections
import smart_open
import random
import sys

"""nlp = spacy.load('en_core_web_lg')

query = "Fetch my messages related to sports"

query = nlp(query)

entity = []

for token in query:
    if token.pos_ == 'PROPN' or token.pos_ == 'NOUN':
        entity.append(token.text.lower())

print(entity)
"""

# Set file names for train and test data
test_data_dir = '/home/ubuntu/Doc2Vec_QuestionAnswer_Model/Train_DataSet_Corpus'
lee_train_file = test_data_dir + os.sep + 'train_question.cor'
train_answer_file = test_data_dir + os.sep + 'train_answer.cor'
#vocab_file = '/home/unity/IVR/ConversationalIvr/utility' + os.sep + 'text8'


def read_corpus(fname, tokens_only=False):
    with smart_open.open(fname, encoding="iso-8859-1") as f:
        for i, line in enumerate(f):
            if tokens_only:
                yield gensim.utils.simple_preprocess(line)
            else:
                # For training data, add tags
                yield gensim.models.doc2vec.TaggedDocument(gensim.utils.simple_preprocess(line), [i])

def train_model():
    model = gensim.models.doc2vec.Doc2Vec(vector_size=1024, min_count=1, epochs=10000, window=2, dbow_words=1, dm=1)
    model.build_vocab(train_corpus)
    model.train(train_corpus, total_examples=model.corpus_count, epochs=model.epochs)
    model.save("doc2vec_unity_message")
    return model

def load_model():
    model_name = '/home/ubuntu/Doc2Vec_QuestionAnswer_Model/unity_message/doc2vec_unity_message'
    model = gensim.models.doc2vec.Doc2Vec.load(model_name)
    return model

def test_model(query):
    #print("Reading Corpus for doc2vec")
    train_corpus = list(read_corpus(lee_train_file))
    train_answer_corpus = list(read_corpus(train_answer_file))
    #print("Reading corpus completed")


    # Load the Pre-Trained Model on Question Answer Data Set #
    #print ('Load the Model')
    model = load_model()

    ranks = []
    second_ranks = []
    query = model.infer_vector(query.split(" "))

    # Comapre the Word Vectors for Trianed Model on same Training Corpus against the Query Vectors #
    sims = model.docvecs.most_similar([query], topn=len(model.docvecs))
    # Print the Similarity Score #
    #print (sims)

    #print('Question ({}): «{}»\n'.format(sims[0][0], ' '.join(train_corpus[sims[0][0]].words)))
    #print('Answer  ({}): «{}»\n'.format(sims[0][0], ' '.join(train_answer_corpus[sims[0][0]].words)))
    #print("Question Score",sims[0][1])
    if sims[0][1] > 0.5:        
        answer = ' '.join(train_answer_corpus[sims[0][0]].words)
        return answer
    else:
        answer = "Sorry i am not very sure what to answer for this query"
        return answer


def main ():
    """ Train the model With Training Question and Answer Corpus
    Model Training is Required when we are are loading new content
    where word matrix have low understanding . for similar content
    no need to train the model again
    model = train_model()
    """
    query = sys.argv[1]
    answer = test_model (query)
    print (answer)


if __name__ == "__main__":
        main()

